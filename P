import base64
import time
import os
import requests
import logging
import uuid
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import FSInputFile
from transformers import pipeline  # –î–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π
from dotenv import load_dotenv

load_dotenv()

bot = Bot(token=os.getenv("BOT_TOKEN"))
dp = Dispatcher()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —ç–º–æ—Ü–∏–π
emotion_classifier = pipeline(
    "text-classification",
    model="cointegrated/rubert-tiny2-cedr-emotion-detection",
    return_all_scores=False
)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è API –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
FUSIONBRAIN_API_URL = "https://api.fusionbrain.ai/web/api/v1/text2image/generation"
API_KEY = os.getenv("FUSIONBRAIN_API_KEY")
API_SECRET = os.getenv("FUSIONBRAIN_API_SECRET")


def generate_art(emotion: str) -> str:
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—Ä—Ç-–æ–±—ä–µ–∫—Ç —á–µ—Ä–µ–∑ FusionBrain –ø–æ —ç–º–æ—Ü–∏–∏"""
    # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —ç–º–æ—Ü–∏–π —Å —Ä—É—Å—Å–∫–∏–º–∏ –æ–ø–∏—Å–∞–Ω–∏—è–º–∏
    emotion_prompts = {
        'happiness': "—Ä–∞–¥–æ—Å—Ç–Ω—ã–π –∞–±—Å—Ç—Ä–∞–∫—Ç–Ω—ã–π –æ–±—ä–µ–∫—Ç, —è—Ä–∫–∏–µ —Ü–≤–µ—Ç–∞, –ø—Ä–∞–∑–¥–Ω–∏—á–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞",
        'sadness': "–º–µ–ª–∞–Ω—Ö–æ–ª–∏—á–Ω–∞—è –∞–±—Å—Ç—Ä–∞–∫—Ü–∏—è, –ø—Ä–∏–≥–ª—É—à–µ–Ω–Ω—ã–µ —Ç–æ–Ω–∞, –¥–æ–∂–¥–ª–∏–≤—ã–π –¥–µ–Ω—å",
        'anger': "–¥–∏–Ω–∞–º–∏—á–Ω–∞—è –∫–æ–º–ø–æ–∑–∏—Ü–∏—è, –∞–≥—Ä–µ—Å—Å–∏–≤–Ω—ã–µ —Ñ–æ—Ä–º—ã, –∫—Ä–∞—Å–Ω—ã–µ –∏ —á–µ—Ä–Ω—ã–µ —Ç–æ–Ω–∞",
        'fear': "—Ç–µ–º–Ω–∞—è –∞–±—Å—Ç—Ä–∞–∫—Ü–∏—è, —Ä–∞–∑–º—ã—Ç—ã–µ –∫–æ–Ω—Ç—É—Ä—ã, —Ç—Ä–µ–≤–æ–∂–Ω–∞—è –∞—Ç–º–æ—Å—Ñ–µ—Ä–∞",
        'neutral': "–º–∏–Ω–∏–º–∞–ª–∏—Å—Ç–∏—á–Ω—ã–π –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π –æ–±—ä–µ–∫—Ç, –ø–∞—Å—Ç–µ–ª—å–Ω—ã–µ —Ç–æ–Ω–∞"
    }
    prompt = emotion_prompts.get(emotion, "–∞–±—Å—Ç—Ä–∞–∫—Ç–Ω–æ–µ –∏—Å–∫—É—Å—Å—Ç–≤–æ")

    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å
    headers = {
        "X-Key": f"Key {API_KEY}",
        "X-Secret": f"Secret {API_SECRET}",
    }
    data = {
        "model_id": 1,  # Kandinsky 2.1
        "params": {
            "type": "GENERATE",
            "width": 1024,
            "height": 1024,
            "num_images": 1,
            "generateParams": {
                "query": prompt
            }
        }
    }
    print("API_KEY =", API_KEY)
    print("API_SECRET =", API_SECRET)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
    response = requests.post(FUSIONBRAIN_API_URL, json=data, headers=headers)
    if response.status_code != 200:
        logging.error(f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {response.status_code} ‚Äî {response.text}")
        return None

    task_id = response.json()['uuid']

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    for _ in range(10):
        status_response = requests.get(
            f"{FUSIONBRAIN_API_URL}/status/{task_id}",
            headers=headers
        )
        status = status_response.json()
        if status['status'] == 'DONE':
            image_base64 = status['images'][0]
            image_data = base64.b64decode(image_base64)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            filename = f"art_{uuid.uuid4()}.png"
            with open(filename, "wb") as f:
                f.write(image_data)
            return filename

        time.sleep(5)

    return None


@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "üé® –ü—Ä–∏–≤–µ—Ç! –Ø - —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π —Ö—É–¥–æ–∂–Ω–∏–∫. –ù–∞–ø–∏—à–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, "
        "–∏ —è —Å–æ–∑–¥–∞–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∞—Ä—Ç-–æ–±—ä–µ–∫—Ç, –æ—Ç—Ä–∞–∂–∞—é—â–∏–π —Ç–≤–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ!\n\n"
        "–ü—Ä–∏–º–µ—Ä: ¬´–¢–æ–ª—å–∫–æ —á—Ç–æ –∑–∞–∫–æ–Ω—á–∏–ª —Å–ª–æ–∂–Ω—ã–π –ø—Ä–æ–µ–∫—Ç, —á—É–≤—Å—Ç–≤—É—é –æ–±–ª–µ–≥—á–µ–Ω–∏–µ¬ª"
    )


@dp.message(F.text)
async def process_message(message: types.Message):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ—Ü–∏—é
    emotion_result = emotion_classifier(message.text)[0]
    emotion = emotion_result['label']
    confidence = emotion_result['score']

    await message.reply(f"üé≠ –≠–º–æ—Ü–∏—è: {emotion} (—Ç–æ—á–Ω–æ—Å—Ç—å: {confidence:.2f})")

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—Ä—Ç
    temp_msg = await message.answer("üñå –°–æ–∑–¥–∞—é –∞—Ä—Ç-–æ–±—ä–µ–∫—Ç...")
    image_path = generate_art(emotion)

    if image_path:
        await bot.delete_message(chat_id=message.chat.id, message_id=temp_msg.message_id)
        await message.reply_photo(
            FSInputFile(image_path),
            caption=f"–í–∞—à —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞—Ä—Ç: {emotion}"
        )
        os.remove(image_path)  # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    else:
        await message.reply("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")


if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    dp.run_polling(bot)
